
{{- $currentNamespace   := .Release.Namespace -}}
{{- $serviceApiServerLb := (lookup "v1" "Service" $currentNamespace "kube-apiserver-svc") }}
{{- $serviceApiServerIP := $serviceApiServerLb.status.loadBalancer.ingress }}

{{- $secretData := (lookup "v1" "Secret" $currentNamespace "pki-ca") }}
{{- $caContent := $secretData.data }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-kubeadm-scripts
data:
  configure-cluster.sh: |+
    #!/bin/sh
    export KUBECONFIG=/etc/kubernetes/admin.conf

    curl https://kube-apiserver-svc:6443
    kubectl cluster-info
    kubectl get ns
    # wait for cluster
    echo "Waiting for api-server endpoint ${ENDPOINT}..."
    until kubectl cluster-info  >/dev/null 2>/dev/null; do
      sleep 1
    done
    
    # ------------------------------------------------------------------------------
    # Cluster configuration
    # ------------------------------------------------------------------------------
    
    
    # upload configuration
    # TODO: https://github.com/kvaps/kubernetes-in-kubernetes/issues/6
    kubeadm init phase upload-config kubeadm --config /config/kubeadmcfg.yaml
    kubectl patch configmap -n kube-system kubeadm-config \
      -p '{"data":{"ClusterStatus":"apiEndpoints: {}\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterStatus"}}'
    
    # upload configuration
    # TODO: https://github.com/kvaps/kubernetes-in-kubernetes/issues/5
    kubeadm init phase upload-config kubelet --config /config/kubeadmcfg.yaml -v1 2>&1 |
      while read line; do echo "$line" | grep 'Preserving the CRISocket information for the control-plane node' && killall kubeadm || echo "$line"; done
    
    # setup bootstrap-tokens
    # TODO: https://github.com/kvaps/kubernetes-in-kubernetes/issues/7
    # TODO: https://github.com/kubernetes/kubernetes/issues/98881
    flatconfig=$(mktemp)
    kubectl config view --flatten > "$flatconfig"
    kubeadm init phase bootstrap-token --config /config/kubeadmcfg.yaml --skip-token-print --kubeconfig="$flatconfig"
    rm -f "$flatconfig"
    
    # correct apiserver address for the external clients
    kubectl apply -n kube-public -f - <<EOT
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: cluster-info
      namespace: kube-public
    data:
      kubeconfig: |
        apiVersion: v1
        clusters:
        - cluster:
            certificate-authority-data: "{{ get $caContent "ca.crt" }}"
            server: https://{{ (first $serviceApiServerIP ).ip }}:6443
          name: ""
        contexts: null
        current-context: ""
        kind: Config
        preferences: {}
        users: null
    EOT
